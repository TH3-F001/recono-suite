#!/bin/bash


# ---------------- Common Checks ---------------- #

# If arg exists return 0, else return 1
check_argument() {
    if [ -z "$1" ]; then
        return 1
    fi

    return 0
}

command_exists() {
    local CMD=$1
    if ! check_argument "$CMD"; then
        print_error "command_exists expects a command as an argument"
        return 1
    fi

    if command -v "$CMD" &> /dev/null; then
        return 0
    else
        return 1
    fi
}

file_exists() {
    local FILEPATH=$1
    if ! check_argument "$FILEPATH"; then
        print_error "file_exists expects a command as an argument"
        return 1
    fi

    if [ -f "$FILEPATH" ]; then
        return 0
    else
        return 1
    fi
}

directory_exists() {
    local DIRPATH=$1
    if ! check_argument "$DIRPATH"; then
        print_error "directory_exists expects a directory path as an argument"
        return 1
    fi

    if [ -d "$DIRPATH" ]; then
        return 0  # Directory exists
    else
        return 1  # Directory does not exist
    fi
}

file_is_executable() {
    local FILEPATH=$1
    if ! check_argument "$FILEPATH"; then
        print_error "file_is_executable expects a filepath as an argument"
        return 1
    fi

    if [ -f "$FILEPATH" ] && [ -x "$FILEPATH" ]; then
        return 0  # File exists and is executable
    else
        return 1  # File does not exist or is not executable
    fi
}

is_in_path() {
    local DIR_PATH=$1
    if ! check_argument "$DIR_PATH"; then
        print_error "is_in_path expects a directory path as an argument"
        return 1
    fi

    if [[ ":$PATH:" != *":$DIR_PATH:"* ]]; then
        return 1
    else
        return 0
    fi
}


# ---------------- Common Utilities  ---------------- #

check_and_run_script() {
    SCRIPT=$1
    if ! check_argument "$SCRIPT"; then
        print_error "check_and_run_script expects a script as an argument"
        return 1
    fi

    if file_is_executable "$SCRIPT"; then
        "$SCRIPT"
        if [ $? -ne 0 ]; then
            print_error "The $SCRIPT failed to execute properly"
            return 1
        fi
    else
        print_error "The script $SCRIPT does not exist or is not executable."
        return 1
    fi
    return 0
}

run_and_indent() {
    local COMMAND="$*"
    if ! check_argument "$COMMAND"; then
        print_error "run_and_indent expects a command as an argument"
        return 1
    fi

    eval "$COMMAND" | while IFS= read -r LINE; do
        echo -e "\t$LINE"
    done

    local EXIT_STATUS=${PIPESTATUS[0]}  # Capture the exit status of the eval command
    if [ $EXIT_STATUS -eq 0 ]; then
        return 0  
    else
        return 1 
    fi
}


run_async_commands() {
    local COMMANDS=("$@")
    local SUCCESS=0
    local PIDS=()

    for COMMAND in "${COMMANDS[@]}"; do
        eval "$COMMAND" &  # Use eval to interpret redirection
        local PID=$!
        PIDS+=("$PID")
    done

    for PID in "${PIDS[@]}"; do
        wait "$PID"
        if [ $? -ne 0 ]; then
            SUCCESS=1
            print_error "Command '$COMMAND' failed."
        fi
    done 

    return $SUCCESS
}

display_loading_animation() {
    local APP=$1
    local PID=$!
    local delay=0.15
    local emojis=('üåë' 'üåí' 'üåì' 'üåî' 'üåï' 'üåñ' 'üåó' 'üåò')
    local i=0

    while [ "$(ps a | awk '{print $1}' | grep $PID)" ]; do
        printf "\t%s  " "${emojis[i]}"
        sleep $delay
        printf "\b\b\b\b\b"
        ((i=(i+1)%8))
    done
    printf "    \b\b\b\b"
}

display_hacky_animation() {
    local PID=$!
    local delay=0.15
    local emojis=('üåë' 'üåí' 'üåì' 'üåî' 'üåï' 'üåñ' 'üåó' 'üåò')
    local i=0

    # Save cursor position
    tput sc

    while [ "$(ps a | awk '{print $1}' | grep $PID)" ]; do
        # Restore cursor position
        tput rc
        # Move cursor up one line
        tput cuu1
        # Print emoji
        printf "\t%s  " "${emojis[i]}"
        sleep $delay
        # Erase to end of line
        tput el
        ((i=(i+1)%8))
    done
}

generate_url_list_from_domains() {
    local DOMAINS="$1"

    if ! check_argument "$DOMAINS"; then
        print_error "generate_url_list_from_domains expects a command as an argument"
        return 1
    fi

    local SALT=$(tr -dc 'a-zA-Z0-9' </dev/urandom | head -c 6)
    local OUT_PRE=$(hash_value "$DOMAINS")
    local URL_FILE="/tmp/url_$OUT_PRE$SALT"

    OLD_IFS="$IFS"
    IFS=','
    read -ra DOMAIN_ARRAY <<< "$DOMAINS"
    IFS="$OLD_IFS"

    for DOMAIN in "${DOMAIN_ARRAY[@]}"; do
        echo "http://$DOMAIN" >> "$URL_FILE"
    done

    echo "$URL_FILE"
}

# ---------------- Print Functions  ---------------- #
print_error() {
  local MSG=$1
  if check_argument $MSG; then
    echo -e "\t ‚ùå [ERROR]:\t$MSG!"
    return 0
  fi

  return 1
}

print_success() {
    local MSG=$1
    if check_argument $MSG; then
        echo -e "\t ‚úÖ [SUCCESS]:\t$MSG!"
        return 0
    fi

    return 1
}


# ---------------- String Operations  ---------------- #

capitalize() {
    local CAPITALIZED_STRING=''
    if check_argument $1; then
        CAPITALIZED_STRING=$(echo "$1" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1')
        echo "$CAPITALIZED_STRING"
        return 0
    fi

    return 1
}

array_to_comma_list() {
    local -n ARRAY=$1
    if ! check_argument $ARRAY;then
        print_error "array_to_comma_list expects an array as an argument"
        return 1
    fi
    local IFS=','
    echo "${ARRAY[*]}"
}

# syntax for calling: MY_ARRAY=($(comma_list_to_array "$COMMA_LIST"))

comma_list_to_array() {
    local LIST=$1
    local -n ARR=$2  

    if ! check_argument "$LIST"; then
        print_error "comma_list_to_array expects a comma-separated string as an argument"
        return 1
    fi

    local IFS=',' 
    read -ra ARR <<< "$LIST"
}

hash_value() {
    local VALUE=$1
    if ! check_argument "$VALUE"; then
        print_error "hash_value expects an value to hash"
        return 1
    fi

    echo -n "$ARGUMENT" | md5sum | awk '{print $1}'
}

file_to_comma_list() {
    local FILEPATH=$1
    local LIST_STRING=""

    if ! check_argument "$FILEPATH"; then
        print_error "file_to_comma_list expects a file path as an argument"
        return 1
    fi

    if ! file_exists $FILEPATH; then
        print_error "File Not Found: $FILEPATH"
        return 1
    fi

    while IFS= read -r line; do
        if [ -z "$LIST_STRING" ]; then
            LIST_STRING="$line"
        else
            LIST_STRING="$LIST_STRING,$line"
        fi
    done < "$FILEPATH"

    echo "$LIST_STRING"
}

file_to_array() {
    local FILE=$1
    local -n ARR=$2  # Create a nameref to the original array

    if ! check_argument "$FILE"; then
        print_error "file_to_array expects a file path as the first argument"
        return 1
    fi

    if ! file_exists "$FILE"; then
        print_error "File not found: $FILE"
        return 1
    fi

    mapfile -t ARR < "$FILE"
}

sort_subdomain_file() {
    local FILE=$1

    if ! check_argument "$FILE"; then
        print_error "sort_subdomain_file expects a file path as the first argument"
        return 1
    fi

    if [[ ! -f "$FILE" ]]; then
        echo "File not found: $FILE"
        return 1
    fi

    awk -F '.' '{for (i=NF; i>0; i--) printf "%s.", $i; print ""}' "$FILE" | \
    sort | \
    awk -F '.' '{for (i=NF; i>0; i--) printf "%s.", $i; print ""}' | \
    rev | cut -c 2- | rev | \
    sed '/^./s///'
}

join_subdomain_files() {
    local DOMAINS=$1
    local IN_DIR=$2
    local OUT_DIR=$3 
    local CMD=$4
    local HASH

    if ! check_argument "$DOMAINS" || ! check_argument "$IN_DIR"  || ! check_argument "$OUT_DIR" || ! check_argument "$CMD"; then
        print_error "join_files_in_directory expects a domains list, an input directory, an output directory and a command name"
        return 1
    fi

    HASH=$(hash_value "$DOMAINS,$CMD")
    local TMP_FILE="/tmp/parse_$HASH.tmp"
    local OUT_FILE="${OUT_DIR}/${CMD}_parsed_${HASH}.txt"
    echo "" > "$OUT_FILE"
    echo "" > "$TMP_FILE"
    local -a DOMAIN_ARRAY
    comma_list_to_array "$DOMAINS" DOMAIN_ARRAY

    for DOMAIN in "${DOMAIN_ARRAY[@]}"; do
        for FILE in "$IN_DIR"/*"$DOMAIN"*; do
            if file_exists "$FILE"; then
                cat "$FILE" >> "$OUT_FILE"
            fi
        done
    done

    sort_subdomain_file "$OUT_FILE" > "$TMP_FILE"
    uniq "$TMP_FILE" > "$OUT_FILE"
    echo "$OUT_FILE"
}

extract_domains_from_urls() {
    local URL_FILE=$1
    local OUTPUT_FILE=$2

    if ! check_argument "$URL_FILE" || ! check_argument "$OUTPUT_FILE"; then
        print_error "extract_domains_from_urls expects a URL list file, and an output file"
        return 1
    fi

    if [[ ! -f "$URL_FILE" ]]; then
        echo "URL file not found: $URL_FILE"
        return 1
    fi

    grep -oP 'https?://\K[^/]+(?=/|$)' "$URL_FILE" | \
    cut -d '@' -f2 | \
    sort -u > "$OUTPUT_FILE"
}

extract_target_domains() {
    local IN_FILE=$1
    local DOMAINS=$2
    local OUT_FILE=$3

    if ! check_argument "$IN_FILE" || ! check_argument "$OUT_FILE" || ! check_argument "$DOMAINS"; then
        print_error "extract_target_domains expects a URL list file, and an output file"
        return 1
    fi

    if [[ ! -f "$IN_FILE" ]]; then
        echo "File not found: $IN_FILE"
        return 1
    fi

    local -a DOMAIN_ARR
    comma_list_to_array "$DOMAINS" DOMAIN_ARR
    echo "" > "$OUT_FILE"  # Clear the output file or create it if it doesn't exist

    for DOMAIN in "${DOMAIN_ARR[@]}"; do
        grep "$DOMAIN" "$IN_FILE" >> "$OUT_FILE"
    done
    # cat $OUT_FILE

    sort -u "$OUT_FILE" -o "$OUT_FILE"
}



# ---------------- Grab External Data ----------------#

get_trusted_dns_resolver_list() {
    local OUTPUT_FILE=$1
    if ! check_argument "$OUTPUT_FILE"; then
        print_error "get_trusted_dns_resolver_list expects an output file as an argument"
        return 1
    fi

    wget https://raw.githubusercontent.com/trickest/resolvers/main/resolvers-trusted.txt -O "$OUTPUT_FILE"
}

get_untrusted_dns_resolver_list() {
    local OUTPUT_FILE=$1
    if ! check_argument $OUTPUT_FILE; then
        print_error "get_untrusted_dns_resolver_list expects an output file as an argument"
        return 1
    fi

    wget https://raw.githubusercontent.com/trickest/resolvers/main/resolvers.txt -O "$OUTPUT_FILE"
}