#!/bin/bash


# ---------------- Common Checks ---------------- #

# If arg exists return 0, else return 1
check_argument() {
    if [ -z "$1" ]; then
        return 1
    fi

    return 0
}

command_exists() {
    local CMD=$1
    if ! check_argument "$CMD"; then
        print_error "command_exists expects a command as an argument"
        return 1
    fi

    if command -v "$CMD" &> /dev/null; then
        return 0
    else
        return 1
    fi
}

file_exists() {
    local FILEPATH=$1
    if ! check_argument "$FILEPATH"; then
        print_error "file_exists expects a command as an argument"
        return 1
    fi

    if [ -f "$FILEPATH" ]; then
        return 0
    else
        return 1
    fi
}

directory_exists() {
    local DIRPATH=$1
    if ! check_argument "$DIRPATH"; then
        print_error "directory_exists expects a directory path as an argument"
        return 1
    fi

    if [ -d "$DIRPATH" ]; then
        return 0  # Directory exists
    else
        return 1  # Directory does not exist
    fi
}

file_is_executable() {
    local FILEPATH=$1
    if ! check_argument "$FILEPATH"; then
        print_error "file_is_executable expects a filepath as an argument"
        return 1
    fi

    if [ -f "$FILEPATH" ] && [ -x "$FILEPATH" ]; then
        return 0  # File exists and is executable
    else
        return 1  # File does not exist or is not executable
    fi
}

is_in_path() {
    local DIR_PATH=$1
    if ! check_argument "$DIR_PATH"; then
        print_error "is_in_path expects a directory path as an argument"
        return 1
    fi

    if [[ ":$PATH:" != *":$DIR_PATH:"* ]]; then
        return 1
    else
        return 0
    fi
}


# ---------------- Common Utilities  ---------------- #

check_and_run_script() {
    SCRIPT=$1
    if ! check_argument "$SCRIPT"; then
        print_error "check_and_run_script expects a script as an argument"
        return 1
    fi

    if file_is_executable "$SCRIPT"; then
        "$SCRIPT"
        if [ $? -ne 0 ]; then
            print_error "The $SCRIPT failed to execute properly"
            return 1
        fi
    else
        print_error "The script $SCRIPT does not exist or is not executable."
        return 1
    fi
    return 0
}

run_and_indent() {
    local COMMAND="$*"
    if ! check_argument "$COMMAND"; then
        print_error "run_and_indent expects a command as an argument"
        return 1
    fi

    $COMMAND | while IFS= read -r LINE; do
        echo -e "\t$LINE"
    done
}



# ---------------- Print Functions  ---------------- #
print_error() {
  local MSG=$1
  if check_argument $MSG; then
    echo -e "\t ❌ [ERROR]:\t$MSG!"
    return 0
  fi

  return 1
}

print_success() {
    local MSG=$1
    if check_argument $MSG; then
        echo -e "\t ✅ [SUCCESS]:\t$MSG!"
        return 0
    fi

    return 1
}


# ---------------- String Operations  ---------------- #

capitalize() {
    local CAPITALIZED_STRING=''
    if check_argument $1; then
        CAPITALIZED_STRING=$(echo "$1" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1')
        echo "$CAPITALIZED_STRING"
        return 0
    fi

    return 1
}

array_to_comma_list() {
    local -n ARRAY=$1
    if ! check_argument $ARRAY;then
        print_error "array_to_comma_list expects an array as an argument"
        return 1
    fi
    local IFS=','
    echo "${ARRAY[*]}"
}

# syntax for calling: MY_ARRAY=($(comma_list_to_array "$COMMA_LIST"))

comma_list_to_array() {
    local LIST=$1
    if ! check_argument "$LIST"; then
        print_error "comma_list_to_array expects an comma separated string as an argument"
        return 1
    fi
    IFS=',' read -ra ARRAY <<< "$LIST"
    echo "${ARRAY[@]}"  
}

hash_value() {
    local VALUE=$1
    if ! check_argument "$VALUE"; then
        print_error "hash_value expects an value to hash"
        return 1
    fi

    echo -n "$ARGUMENT" | md5sum | awk '{print $1}'
}

file_to_comma_list() {
    local FILEPATH=$1
    local LIST_STRING=""

    if ! check_argument "$FILEPATH"; then
        print_error "file_to_comma_list expects a file path as an argument"
        return 1
    fi

    if ! file_exists $FILEPATH; then
        print_error "File Not Found: $FILEPATH"
        return 1
    fi

    while IFS= read -r line; do
        if [ -z "$LIST_STRING" ]; then
            LIST_STRING="$line"
        else
            LIST_STRING="$LIST_STRING,$line"
        fi
    done < "$FILEPATH"

    echo "$LIST_STRING"

}


# ---------------- Grab External Data ----------------#

get_trusted_dns_resolver_list() {
    local OUTPUT_FILE=$1
    if ! check_argument "$OUTPUT_FILE"; then
        print_error "get_trusted_dns_resolver_list expects an output file as an argument"
        return 1
    fi

    wget https://raw.githubusercontent.com/trickest/resolvers/main/resolvers-trusted.txt -O "$OUTPUT_FILE"
}

get_untrusted_dns_resolver_list() {
    local OUTPUT_FILE=$1
    if ! check_argument $OUTPUT_FILE; then
        print_error "get_untrusted_dns_resolver_list expects an output file as an argument"
        return 1
    fi

    wget https://raw.githubusercontent.com/trickest/resolvers/main/resolvers.txt -O "$OUTPUT_FILE"
}